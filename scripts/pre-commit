#!/bin/bash

# Git pre-commit hook for markdown-writer-template
# Auto-formats markdown files before commit

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1" >&2
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1" >&2
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" >&2
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

# Find the project root (directory containing .git)
find_project_root() {
    local dir="$PWD"
    while [[ "$dir" != "/" ]]; do
        if [[ -d "$dir/.git" ]]; then
            echo "$dir"
            return 0
        fi
        dir=$(dirname "$dir")
    done
    return 1
}

# Check if format script exists
check_format_script() {
    local project_root="$1"
    local format_script="$project_root/scripts/format.sh"
    
    if [[ -x "$format_script" ]]; then
        echo "$format_script"
        return 0
    fi
    return 1
}

# Main hook logic
main() {
    # Find project root
    local project_root
    if ! project_root=$(find_project_root); then
        log_error "Could not find project root (.git directory)"
        exit 1
    fi
    
    # Check if format script exists
    local format_script
    if ! format_script=$(check_format_script "$project_root"); then
        log_warning "Format script not found or not executable, skipping auto-formatting"
        exit 0
    fi
    
    # Get list of staged markdown files
    local staged_files
    staged_files=$(git diff --cached --name-only --diff-filter=ACM | grep '\.md$' || true)
    
    if [[ -z "$staged_files" ]]; then
        # No markdown files staged, nothing to do
        exit 0
    fi
    
    log_info "Found staged markdown files, running auto-formatting..."
    
    local formatted_files=()
    local failed_files=()
    
    # Process each staged markdown file
    while IFS= read -r file; do
        if [[ -f "$file" ]]; then
            log_info "Formatting: $file"
            
            # Run format script on the file
            if cd "$project_root" && "$format_script" "$file" 2>/dev/null; then
                formatted_files+=("$file")
                
                # Check if formatted files were created
                local file_dir
                file_dir=$(dirname "$file")
                local file_name
                file_name=$(basename "$file" .md)
                local formatted_dir="$file_dir/formatted"
                
                if [[ -d "$formatted_dir" ]]; then
                    # Stage any newly created formatted files
                    for ext in docx pdf html; do
                        local formatted_file="$formatted_dir/$file_name.$ext"
                        if [[ -f "$formatted_file" ]]; then
                            git add "$formatted_file"
                        fi
                    done
                fi
            else
                failed_files+=("$file")
                log_warning "Failed to format: $file"
            fi
        fi
    done <<< "$staged_files"
    
    # Report results
    if [[ ${#formatted_files[@]} -gt 0 ]]; then
        log_success "Successfully formatted ${#formatted_files[@]} file(s)"
        for file in "${formatted_files[@]}"; do
            echo "  ✓ $file"
        done
    fi
    
    if [[ ${#failed_files[@]} -gt 0 ]]; then
        log_warning "Failed to format ${#failed_files[@]} file(s)"
        for file in "${failed_files[@]}"; do
            echo "  ✗ $file"
        done
        echo
        echo "Tip: You can skip auto-formatting with: git commit --no-verify"
    fi
    
    # Exit successfully - we don't want to block commits even if formatting fails
    exit 0
}

# Run main function
main "$@"